
import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;



/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */

    HashMap<String, Integer> maxPostId = new HashMap<>();
    HashMap<String, Integer> numPosts = new HashMap<>();

    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
        //execute("source create.sql;");
        maxPostId.put("user_ACHERW", 2);
        maxPostId.put("user_XYRSAF", 4);
        numPosts.put("user_ACHERW", 2);
        numPosts.put("user_XYRSAF", 4);

    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    public String markdown(String text) {
        Parser parser = Parser.builder().build();
        HtmlRenderer renderer = HtmlRenderer.builder().build();
        return renderer.render(parser.parse(text)); 
    }

    // connect to the database
    public Connection connect()
    {
       /* load the driver */
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            return null;
        }

        Connection c = null;

        try {
            /* create an instance of a Connection object */
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", ""); 
        } catch (SQLException ex) {
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        }
        
        return c;
    }

    public boolean checkPostId(String postid, String username, HttpServletResponse response) 
        throws ServletException, IOException 
    {
        try {
            int postint = Integer.parseInt(postid);
            return true;
        } catch (NumberFormatException nfe) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return false;
        }
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException, IOException 
    {
	// implement your GET method handling code here
	// currently we simply show the page generated by "edit.jsp"
        Connection c = connect();

        System.err.println("DOGET");
        String action = request.getParameter("action");
        System.err.println(action);

        String username = "";
        String postid = "";
        String title = "";
        String body = "";

        if(request.getParameter("username") != null) username = request.getParameter("username");
        if(request.getParameter("postid") != null) postid = request.getParameter("postid");
        if(request.getParameter("title") != null) title = request.getParameter("title");
        if(request.getParameter("body") != null) body = request.getParameter("body");


        if(action == null) return;

        if (action.equals("preview")) {
            if(!checkPostId(postid, username, response)) return;
            String markTitle = "";
            String markBody = "";
            if(title != null) markTitle = markdown(title);
            if(body != null) markBody = markdown(body);
            request.setAttribute("markTitle", markTitle);
            request.setAttribute("markBody", markBody);
            request.getRequestDispatcher("/preview.jsp").forward(request, response);
            return;
        } 
        else if (action.equals("list")) {
            request.getRequestDispatcher("/list.jsp").forward(request, response);
        } 
        else if (action.equals("open")) {
            if(!checkPostId(postid, username, response)) return;

            if (Integer.parseInt(postid) > 0) {
                // if title or body are null
                if (request.getParameter("title") == null || request.getParameter("body") == null) {
                    try {
                        String statement = "SELECT * FROM Posts WHERE username = ? AND postid = ?;";

                        PreparedStatement ps = c.prepareStatement(statement);

                        ps.setString(1, username);
                        ps.setInt(2, Integer.parseInt(postid));

                        ResultSet rs = ps.executeQuery();

                        if (rs.next() == false) {
                            response.sendError(HttpServletResponse.SC_NOT_FOUND);
                            return;
                        }

                        title = rs.getString("title");
                        body = rs.getString("body");

                        request.setAttribute("title", title);
                        request.setAttribute("body", body);
                        response.setStatus(HttpServletResponse.SC_OK);
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);
                        return;
                    } catch (SQLException ex) {
                        System.out.println("SQLException caught");
                        System.out.println("---");
                        while ( ex != null ) {
                            System.out.println("Message   : " + ex.getMessage());
                            System.out.println("SQLState  : " + ex.getSQLState());
                            System.out.println("ErrorCode : " + ex.getErrorCode());
                            System.out.println("---");
                            ex = ex.getNextException();
                        }
                    } finally {
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                    }
                }
            }
            request.setAttribute("title", title);
            request.setAttribute("body", body);
            response.setStatus(HttpServletResponse.SC_OK);
            request.getRequestDispatcher("/edit.jsp").forward(request, response);
            return;
        }
        request.getRequestDispatcher("/edit.jsp").forward(request, response);
    }
    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
        Connection c = connect();

        System.err.println("DOPOST");
        String username = "";
        String postid = "";
        String title = "";
        String body = "";
        int postint = 0;

        if(request.getParameter("username") != null) username = request.getParameter("username");
        if(request.getParameter("postid") != null) postid = request.getParameter("postid");
        if(request.getParameter("title") != null) title = request.getParameter("title");
        if(request.getParameter("body") != null) body = request.getParameter("body");

        String action = request.getParameter("action");
        System.err.println(action);
        if(action == null) return;

        if (action.equals("save")) {
            if(!checkPostId(postid, username, response)) return;
            int maxId = 1;
            String statement = "";

            // if postid <= 0, assign a new postid and save content as new post
            if (Integer.parseInt(postid) <= 0) {
                if (maxPostId.containsKey(username)) {
                    maxId = maxPostId.get(username)+1;
                    maxPostId.put(username, maxId);
                    numPosts.put(username, numPosts.get(username)+1);
                }
                else {
                    maxPostId.put(username, 1);
                    numPosts.put(username, 1);
                }

                try {
                    statement = "INSERT INTO Posts VALUES(?, ?, ?, ?, NOW(), NOW());";
                    PreparedStatement ps = c.prepareStatement(statement);

                    ps.setString(1, username);
                    ps.setInt(2, maxPostId.get(username));
                    ps.setString(3, title);
                    ps.setString(4, body);

                    ps.executeUpdate();
                } catch (SQLException ex) {
                    System.out.println("SQLException caught");
                    System.out.println("---");
                    while ( ex != null ) {
                        System.out.println("Message   : " + ex.getMessage());
                        System.out.println("SQLState  : " + ex.getSQLState());
                        System.out.println("ErrorCode : " + ex.getErrorCode());
                        System.out.println("---");
                        ex = ex.getNextException();
                }
                } finally {
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }
            }
            // postid > 0
            else {
                try {
                    statement = "SELECT * FROM Posts WHERE username = ? AND postid = ?;";

                    PreparedStatement ps = c.prepareStatement(statement);

                    ps.setString(1, username);
                    ps.setInt(2, Integer.parseInt(postid));

                    ResultSet rs = ps.executeQuery();

                    if (rs.next() == false) {
                        response.sendError(HttpServletResponse.SC_NOT_FOUND);
                        return;
                    }

                    try {
                        c = connect();

                        statement = "UPDATE Posts SET title = ?, body = ?, modified = NOW() WHERE " +
                        "username = ? AND postid = ?;";

                        PreparedStatement ps2 = c.prepareStatement(statement);

                        ps2.setString(1, title);
                        ps2.setString(2, body);
                        ps2.setString(3, username);
                        ps2.setInt(4, Integer.parseInt(postid));

                        ps2.executeUpdate();
                    } catch (SQLException ex) {
                        System.out.println("SQLException caught");
                        System.out.println("---");
                        while ( ex != null ) {
                            System.out.println("Message   : " + ex.getMessage());
                            System.out.println("SQLState  : " + ex.getSQLState());
                            System.out.println("ErrorCode : " + ex.getErrorCode());
                            System.out.println("---");
                            ex = ex.getNextException();
                        }
                    } finally {
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                    }  
                } catch (SQLException ex) {
                    System.out.println("SQLException caught");
                    System.out.println("---");
                    while ( ex != null ) {
                        System.out.println("Message   : " + ex.getMessage());
                        System.out.println("SQLState  : " + ex.getSQLState());
                        System.out.println("ErrorCode : " + ex.getErrorCode());
                        System.out.println("---");
                        ex = ex.getNextException();
                    }
                } finally {
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }
            }

            request.setAttribute("title", title); 
            request.setAttribute("body", body);           
            request.getRequestDispatcher("/list.jsp").forward(request, response);
            return;
        } else if (action.equals("preview")) {
            if(!checkPostId(postid, username, response)) return;
            String markTitle = "";
            String markBody = "";
            if(title != null) markTitle = markdown(title);
            if(body != null) markBody = markdown(body);
            request.setAttribute("markTitle", markTitle);
            request.setAttribute("markBody", markBody);
            request.getRequestDispatcher("/preview.jsp").forward(request, response);
        } else if (action.equals("delete")) {
            if(!checkPostId(postid, username, response)) return;

            try {
                String statement = "SELECT * FROM Posts WHERE username = ? AND postid = ?;";

                PreparedStatement ps = c.prepareStatement(statement);

                ps.setString(1, username);
                ps.setInt(2, Integer.parseInt(postid));

                ResultSet rs = ps.executeQuery();

                // trying to delete post that hasn't been saved; just close
                if (rs.next() == false) {
                    request.getRequestDispatcher("/list.jsp").forward(request, response);
                    return;
                }

                // if post is in database, delete
                try {
                    statement = "DELETE FROM Posts WHERE username = ? AND postid = ?;";

                    PreparedStatement ps2 = c.prepareStatement(statement);

                    ps2.setString(1, username);
                    ps2.setInt(2, Integer.parseInt(postid));

                    ps2.executeUpdate();
                } catch (SQLException ex) {
                    System.out.println("SQLException caught");
                    System.out.println("---");
                    while ( ex != null ) {
                        System.out.println("Message   : " + ex.getMessage());
                        System.out.println("SQLState  : " + ex.getSQLState());
                        System.out.println("ErrorCode : " + ex.getErrorCode());
                        System.out.println("---");
                        ex = ex.getNextException();
                    }
                } finally {
                    try { c.close(); } catch (Exception e) { /* ignored */ }
                }

                numPosts.put(username, numPosts.get(username) - 1);

                if(Integer.parseInt(request.getParameter("postid")) == maxPostId.get(username)) {
                    if(numPosts.get(username) == 0) {
                        System.err.println("removing key!");
                        maxPostId.remove(username);
                        numPosts.remove(username);
                    }
                    else {
                        System.err.println("Decrementing maxpostid!, now " + request.getParameter("postid") + "-1");
                        maxPostId.put(username, Integer.parseInt(request.getParameter("postid")) - 1);
                    }
                    
                }
            } catch (SQLException ex) {
                System.out.println("SQLException caught");
                System.out.println("---");
                while ( ex != null ) {
                    System.out.println("Message   : " + ex.getMessage());
                    System.out.println("SQLState  : " + ex.getSQLState());
                    System.out.println("ErrorCode : " + ex.getErrorCode());
                    System.out.println("---");
                    ex = ex.getNextException();
                }
            } finally {
                try { c.close(); } catch (Exception e) { /* ignored */ }
            }
            
            request.getRequestDispatcher("/list.jsp").forward(request, response);
            return;
        } 
        else if (action.equals("close")) {
            request.getRequestDispatcher("/list.jsp").forward(request, response);
            return;
        }
        else if (action.equals("list")) {
            request.getRequestDispatcher("/list.jsp").forward(request, response);
        } 
        else if (action.equals("open")) {
            if(!checkPostId(postid, username, response)) return;

            if (Integer.parseInt(postid) > 0) {
                // if title or body are null
                if (request.getParameter("title") == null || request.getParameter("body") == null) {
                    try {
                        String statement = "SELECT * FROM Posts WHERE username = ? AND postid = ?;";

                        PreparedStatement ps = c.prepareStatement(statement);

                        ps.setString(1, username);
                        ps.setInt(2, Integer.parseInt(postid));

                        ResultSet rs = ps.executeQuery();

                        if (rs.next() == false) {
                            response.sendError(HttpServletResponse.SC_NOT_FOUND);
                            return;
                        }

                        title = rs.getString("title");
                        body = rs.getString("body");

                        request.setAttribute("title", title);
                        request.setAttribute("body", body);
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);
                        return;
                    } catch (SQLException ex) {
                        System.out.println("SQLException caught");
                        System.out.println("---");
                        while ( ex != null ) {
                            System.out.println("Message   : " + ex.getMessage());
                            System.out.println("SQLState  : " + ex.getSQLState());
                            System.out.println("ErrorCode : " + ex.getErrorCode());
                            System.out.println("---");
                            ex = ex.getNextException();
                        }
                    } finally {
                        try { c.close(); } catch (Exception e) { /* ignored */ }
                    }
                }
            }

            request.setAttribute("title", title);
            request.setAttribute("body", body);
            request.getRequestDispatcher("/edit.jsp").forward(request, response);
            return;
        }

        request.getRequestDispatcher("/edit.jsp").forward(request, response);
    }

    // save button is clicked
    public void execute(String query)
    {
        Connection c = connect();
        Statement s = null;

        try {
            s = c.createStatement();
            s.executeUpdate(query);
        } catch (SQLException ex) {
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                ex = ex.getNextException();
            }
        } finally {
            try { s.close(); } catch (Exception e) { /* ignored */ }
            try { c.close(); } catch (Exception e) { /* ignored */ }
        }
    }
}

